int recursion(long long n, long long count)
{
    if(n == 1) //base case
        return 0;
    if(n%2 == 0)
    {
        count += 1 + recursion(n/2, count); //return 1st case
    }
    else
    {
        count += 1 + min(recursion(n-1, count), recursion(n+1, count)); //return 2nd case with min function
    }
    return count;
}

int main()
{
  int n, count;
  return recursion(n, count);
}

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).
class Solution {
public:
    int countOdds(int low, int high) {
        
        int count = 0;//holds #
        
        if ((low >= 0) && (high <= pow(10, 9)))
        {
            if (low <= high)
            {
                if (low % 2 == 1)
                {
                    low++;
                    return count += 1 + countOdds(low, high); // increment count and return low and high
                }
                else if (low % 2 == 0)
                {
                    low++;
                    return countOdds(low, high); //return low and high
                }
            }
        }
        return count; // return from func
    }
};

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
